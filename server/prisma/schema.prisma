// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  role      String   @default("USER")
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  createdTasks     Task[]          @relation("TaskCreator")
  assignedTasks    Task[]          @relation("TaskAssignee")
  comments         Comment[]
  watchedTasks     TaskWatcher[]
  attachments      Attachment[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      String        @default("ACTIVE")
  priority    String        @default("MEDIUM")
  startDate   DateTime      @default(now())
  dueDate     DateTime?
  color       String        @default("#3B82F6")
  isPublic    Boolean       @default(false)
  inviteCode  String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Settings
  allowComments      Boolean @default(true)
  allowFileUploads   Boolean @default(true)
  emailNotifications Boolean @default(true)

  // Relations
  owner    User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  members  ProjectMember[]
  tasks    Task[]
  columns  ProjectColumn[]
  tags     ProjectTag[]

  @@map("projects")
}

model ProjectMember {
  id       String            @id @default(cuid())
  role     String            @default("MEMBER")
  joinedAt DateTime          @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

model ProjectColumn {
  id    String @id @default(cuid())
  name  String
  order Int
  color String @default("#6B7280")

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]

  @@map("project_columns")
}

model ProjectTag {
  id   String @id @default(cuid())
  name String

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     TaskTag[]

  @@unique([name, projectId])
  @@map("project_tags")
}

model Task {
  id             String    @id @default(cuid())
  title          String
  description    String?
  status         String    @default("To Do")
  priority       String    @default("MEDIUM")
  position       Int       @default(0)
  dueDate        DateTime?
  startDate      DateTime?
  completedDate  DateTime?
  estimatedHours Float?
  actualHours    Float?
  isArchived     Boolean   @default(false)
  color          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  column   ProjectColumn? @relation(fields: [columnId], references: [id])
  columnId String?

  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId String

  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId String?

  comments     Comment[]
  attachments  Attachment[]
  checklistItems ChecklistItem[]
  watchers     TaskWatcher[]
  tags         TaskTag[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("comments")
}

model Attachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimetype     String
  size         Int
  uploadedAt   DateTime @default(now())

  // Relations
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("attachments")
}

model ChecklistItem {
  id        String   @id @default(cuid())
  text      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("checklist_items")
}

model TaskWatcher {
  id String @id @default(cuid())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@unique([userId, taskId])
  @@map("task_watchers")
}

model TaskTag {
  id String @id @default(cuid())

  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  tag   ProjectTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@unique([taskId, tagId])
  @@map("task_tags")
}

// Note: Using strings instead of enums for SQLite compatibility
// Valid values:
// Role: "USER", "ADMIN"
// ProjectStatus: "ACTIVE", "COMPLETED", "ARCHIVED", "ON_HOLD"
// Priority: "LOW", "MEDIUM", "HIGH", "URGENT"
// ProjectMemberRole: "OWNER", "ADMIN", "MEMBER"
